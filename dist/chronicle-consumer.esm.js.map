{"version":3,"file":"chronicle-consumer.esm.js","sources":["../src/index.ts"],"sourcesContent":["import WebSocket from \"ws\";\nimport EventEmitter from \"events\";\nimport Emittery from \"emittery\";\n\ntype EmitterType = {\n  type: 'sync'\n  adapter: EventEmitter\n} | {\n  type: 'async'\n  adapter: Emittery\n}\nclass ConsumerServer<T extends WebSocket = WebSocket> {\n  private wsPort: number;\n  private wsHost: string\n  private ackEvery: number;\n  private interactive: boolean;\n  private async: boolean;\n  private emitter: EmitterType; // Emittery or EventEmitter   \n  private typemap = new Map<number, string>(); // @TODO: narrow down the values \n  private confirmed_block: number;\n  private unconfirmed_block: number;\n  private server?: WebSocket.Server<T>;\n  private chronicleConnection?: T\n  private asyncTasksInProcessingCounter = 0;\n  private asyncMaxTasksThreshold: number | undefined;\n\n\n  constructor(opts: {\n    port: number,\n    host?: string,\n    ackEvery?: number\n    interactive?: boolean\n    async?: boolean\n    asyncMaxTasksThreshold?: number\n  }) {\n    if (!opts.port) {\n      throw Error(\"port not defined\");\n    }\n\n    this.wsPort = opts.port;\n\n    this.wsHost = '0.0.0.0';\n    if (opts.host) {\n      this.wsHost = opts.host;\n    }\n\n    this.ackEvery = 100;\n    if (opts.ackEvery) {\n      this.ackEvery = opts.ackEvery;\n    }\n\n    this.interactive = false;\n    if (opts.interactive) {\n      this.interactive = true;\n    }\n\n    if (opts.async) {\n      this.async = true;\n      this.emitter = {\n        type: 'async',\n        adapter: new Emittery()\n      }\n      if (opts.asyncMaxTasksThreshold) {\n        this.asyncMaxTasksThreshold = opts.asyncMaxTasksThreshold;\n      } else {\n        throw new Error(\"must define `asyncMaxTasksThreshold` in async mode\")\n      }\n    } else {\n      this.async = false;\n      this.emitter = {\n        type: 'sync',\n        adapter: new EventEmitter()\n      }\n    }\n\n\n\n    this.typemap = new Map();\n    this.typemap.set(1001, 'fork');\n    this.typemap.set(1002, 'block');\n    this.typemap.set(1003, 'tx');\n    this.typemap.set(1004, 'abi');\n    this.typemap.set(1005, 'abiRemoved');\n    this.typemap.set(1006, 'abiError');\n    this.typemap.set(1007, 'tableRow');\n    this.typemap.set(1008, 'encoderError');\n    this.typemap.set(1009, 'pause');\n    this.typemap.set(1010, 'blockCompleted');\n    this.typemap.set(1011, 'permission');\n    this.typemap.set(1012, 'permissionLink');\n    this.typemap.set(1013, 'accMetadata');\n\n    this.confirmed_block = 0;\n    this.unconfirmed_block = 0;\n  }\n\n  start() {\n    console.log('Starting Chronicle consumer on ' + this.wsHost + ':' + this.wsPort);\n    console.log('Acknowledging every ' + this.ackEvery + ' blocks');\n\n    this.server = new WebSocket.Server({ host: this.wsHost, port: this.wsPort });\n    this.server.on('connection', this._onConnection.bind(this));\n  }\n\n  stop() {\n    this.server?.close();\n  }\n\n  on(eventName, listener) { return this.emitter.adapter.on(eventName, listener) }\n  off(eventName, listener) { return this.emitter.adapter.off(eventName, listener) }\n  once(eventName, listener) { return this.emitter.adapter.once(eventName, listener) }\n\n\n  async requestBlocks(start, end) {\n    if (!this.interactive) {\n      throw Error('requestBlocks can only be called in interactive mode');\n    }\n\n    if (start > end) {\n      throw Error('start block should not be lower than end');\n    }\n\n    this.chronicleConnection?.send(start.toString(10) + '-' + end.toString(10));\n  }\n\n  closeHandler(socket, emitDisconnect = true) {\n    try {\n      socket.close();\n    } catch (err) {\n      console.error('Graceful close of websocket threw error', err);\n    } finally {\n      if (emitDisconnect) {\n        this['kConsumerServerClientConnected'] = false;\n        this.emitter.adapter.emit('disconnected', {\n          remoteAddress: socket._socket.remoteAddress,\n          remoteFamily: socket._socket.remoteFamily,\n          remotePort: socket._socket.remotePort\n        });\n      }\n    }\n  }\n\n  _onConnection(socket) {\n    if (this['kConsumerServerClientConnected']) {\n      console.error('Rejected a new Chronicle connection because one is active already');\n      return this.closeHandler(socket, false);\n    }\n\n    this['kConsumerServerClientConnected'] = true;\n    this.chronicleConnection = socket;\n    this.emitter.adapter.emit('connected', {\n      remoteAddress: socket._socket.remoteAddress,\n      remoteFamily: socket._socket.remoteFamily,\n      remotePort: socket._socket.remotePort\n    });\n\n    socket.on('close', () => {\n      console.log('Graceful close of Chronicle connection initiated');\n      this.closeHandler(socket);\n    });\n\n    socket.on('error', () => {\n      console.error('Error close of Chronicle connection initiated');\n      this.closeHandler(socket);\n    });\n\n    socket.on('message', (data) => {\n      const msgType = data.readInt32LE(0);\n      const opts = data.readInt32LE(4);\n      const msg = JSON.parse(data.toString('utf8', 8));\n\n      const event = this.typemap.get(msgType);\n      if (!event) {\n        throw Error('Unknown msgType: ' + msgType);\n      }\n\n      const res = this.emitter.adapter.emit(event, msg);\n      if (this.async) {\n        if (typeof res === 'boolean') throw new Error(\"in async mode res should be a promise, not boolean\")\n\n        // once promise comes in -- increment the counter\n        this.asyncTasksInProcessingCounter++;\n        // console.log(\"tasksTracker: consumerModule: counter incr: event+traceId:\", `${event}+${msg?.trace?.id}`)\n        res.finally(() => {\n          // console.log(\"tasksTracker: consumerModule: counter decr: event+traceId:\", `${event}+${msg?.trace?.id}`)\n          // once promise is resolved -- decrement the counter\n          if (this.asyncTasksInProcessingCounter === this.asyncMaxTasksThreshold) {\n            // if going below threshold, enforce ack\n            // console.log(\"enforcing ack signal because threshold surpassed\")\n            this._async_ack(this.confirmed_block);\n          }\n          this.asyncTasksInProcessingCounter--;\n        });\n      }\n\n      let block_num;\n      let do_ack = false;\n      switch (msgType) {\n\n        case 1010:           /* BLOCK_COMPLETED */\n          block_num = msg['block_num'];\n          this.unconfirmed_block = block_num;\n          if (this.unconfirmed_block - this.confirmed_block >= this.ackEvery) {\n            this.confirmed_block = block_num;\n            do_ack = true;\n          }\n          break;\n\n        case 1001:           /* FORK */\n          block_num = msg['block_num'];\n          this.confirmed_block = block_num - 1;\n          this.unconfirmed_block = block_num - 1;\n          do_ack = true;\n          break;\n      }\n\n      if (do_ack) {\n        if (this.async) {\n\n          if (!this.asyncMaxTasksThreshold) throw new Error(\"asyncMaxTasksThreshold must be defined in async mode\")\n\n          if (this.asyncTasksInProcessingCounter >= this.asyncMaxTasksThreshold) {\n            // console.log(\"received ack signal but not sending ack, because threshold not passed: this.asyncTasksInProcessingCounter >= this.asyncMaxTasksThreshold\", `${this.asyncTasksInProcessingCounter} >= ${this.asyncMaxTasksThreshold}`)\n            return;\n          } else {\n            // console.log(\"received ack signal and sending ack, because threshold passed: this.asyncTasksInProcessingCounter >= this.asyncMaxTasksThreshold\", `${this.asyncTasksInProcessingCounter} >= ${this.asyncMaxTasksThreshold}`)\n          }\n          // if we're here, then we're ready to send ack\n          this._async_ack(this.confirmed_block);\n        }\n        else {\n          this._sync_ack(this.confirmed_block);\n        }\n      }\n    });\n  }\n\n  async _async_ack(ack_block_number) {\n    if (!this.chronicleConnection) throw new Error('chronicleConnection must be defined')\n\n    if (!this.interactive) {\n      if (this.emitter.type !== 'async') throw new Error('emitter type must be async')\n\n      try {\n        await this.emitter.adapter.emit('ackBlock', ack_block_number);\n        this.chronicleConnection.send(ack_block_number.toString(10));\n      } catch (e) {\n        console.error('critical error: ackBlock listener threw error')\n      }\n\n    }\n  }\n\n  _sync_ack(ack_block_number) {\n    if (!this.chronicleConnection) throw new Error('chronicleConnection must be defined')\n\n    if (!this.interactive) {\n      this.emitter.adapter.emit('ackBlock', ack_block_number);\n      this.chronicleConnection.send(ack_block_number.toString(10));\n    }\n  }\n}\n\n\n\nmodule.exports = ConsumerServer;\n"],"names":["ConsumerServer","opts","wsPort","wsHost","ackEvery","interactive","async","emitter","typemap","Map","confirmed_block","unconfirmed_block","server","chronicleConnection","asyncTasksInProcessingCounter","asyncMaxTasksThreshold","port","Error","host","type","adapter","Emittery","EventEmitter","set","start","console","log","WebSocket","Server","on","_onConnection","bind","stop","close","eventName","listener","off","once","requestBlocks","end","send","toString","closeHandler","socket","emitDisconnect","err","error","emit","remoteAddress","_socket","remoteFamily","remotePort","data","msgType","readInt32LE","msg","JSON","parse","event","get","res","_async_ack","block_num","do_ack","_sync_ack","ack_block_number","module","exports"],"mappings":"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"}